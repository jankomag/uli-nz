tm_shape(properties) +
tm_dots(col = "#FB6A4A") +
# define some style / plotting options
tm_layout(frame = F)
properties = st_transform(properties, 27700)
properties_filt
selected_oa <- oa[oa$code == "E00033902"]
oa
selected_oa <- oa$code == "E00033902"
oa
selected_oa
tm_shape(selected_oa) +
tm_fill() +
tm_shape(prop_clip) +
tm_dots()
prop_clip = properties[oa,]
tm_shape(selected_oa) +
tm_fill() +
tm_shape(prop_clip) +
tm_dots()
properties = st_transform(properties, 27700)
properties_filt
prop_clip = properties[oa,]
selected_oa <- filter(oa, code == "E00033902")
selected_oa <- filter(oa, oa$code == "E00033902")
selected_oa <- oa[oa$code == "E00033902",]
selected_oa
tm_shape(selected_oa) +
tm_fill() +
tm_shape(prop_clip) +
tm_dots()
selected_oa <- oa[oa$code == "E00033902",]
prop_sel_clip = properties[selected_oa,]
tm_shape(selected_oa) +
tm_fill() +
tm_shape(prop_clip) +
tm_dots()
selected_oa <- oa[oa$code == "E00033902",]
prop_select_int <- st_intersection(selected_oa, properties)
tm_shape(selected_oa) +
tm_fill() +
tm_shape(prop_clip) +
tm_dots()
# continued
# union the oa layer to a single polygon
liv_merge <- st_sf(st_union(oa))
# buffer this
buf_liv <- st_buffer(liv_merge, 2000)
# and map
tm_shape(buf_liv) +
tm_borders() +
tm_shape(liv_merge) + tm_fill()
tmp = st_contains(oa, properties, sparse = F)
prop.count = rowSums(tmp)
head(prop.count)
oa$prop.count = prop.count
tm_shape(oa) +
tm_dots(size = "prop.count", alpha = 0.5) +
tm_shape(liv_merge) + tm_borders()
st_crs(oa)
st_crs(selected_oa)
head(st_area(oa))
head(st_area(selected_oa))
#### TASK 3
oa$area_sqkm <- st_area(oa) / (1000 * 1000)
oa(head)
head(oa)
oa$props_per_sqkm <- oa$prop.count/ oa$area_sqkm
head(oa)
tm_shape(oa) +
tm_fill(col = oa$props_per_sqkm)
tm_shape(selected_oa) +
tm_fill() +
tm_shape(prop_clip) +
tm_dots()
tm_shape(oa) +
tm_fill() +
tm_dots()
tm_shape(oa) +
tm_fill() +
tm_shape(oa) +
tm_fill(col = oa$props_per_sqkm)
tm_shape(oa) +
tm_fill(col ="props_per_sqkm")
tm_shape(oa) +
tm_fill(col ="props_per_sqkm", style = "kmeans")
# continued
## define a 1km grid in polygons
sq = st_make_grid(oa, 1000, what = "polygons", square = T)
sq_grid = data.frame(ID = 1:length(sq))
st_geometry(sq_grid) = sq
# clip the extent of oa
sq_grid = sq_grid[oa,]
# plot
tm_shape(sq_grid) + tm_polygons(col = "grey") +
tm_shape(oa) +tm_borders(col = "red")
int.res_sf <- st_intersection(sq_grid, oa[, c("code","prop.count")])
head(int.res_sf)
# generate area and proportions
int.areas <- st_area(int.res_sf)
liv.areas <- st_area(oa)
# match tract area to the new layer
index <- match(int.res_sf$code, oa$code)
liv.areas <- liv.areas[index]
liv.prop <- as.vector(int.areas)/as.vector(liv.areas)
int.res_sf$props <- oa$prop.count[index] * liv.prop
# summarise the counts of properties of the grid cells
int.res_sf %>% st_drop_geometry() %>%
group_by(ID) %>%
summarise(count = sum(props)) -> props
# link to the grid data
sq_grid %>% left_join(props) -> sq_grid
library(dplyr)
# summarise the counts of properties of the grid cells
int.res_sf %>% st_drop_geometry() %>%
group_by(ID) %>%
summarise(count = sum(props)) -> props
# link to the grid data
sq_grid %>% left_join(props) -> sq_grid
# link to the grid data
sq_grid %>% left_join(props) -> sq_grid
tm_shape(sq_grid) +
tm_polygons("count", palette = "Greens",
style = "kmeans", title = "Properties for sale") +
tm_layout(frame = F, legend.position = c(1,0.5))
tm_shape(props2) +
tm_polygons("prop.count", palette = "Greens",
style = "kmeans", title = "No. of Properties for sale") +
tm_layout(frame = F, legend.position = c(1,0.5))
# link to the grid data
sq_grid %>% left_join(props) -> sq_grid
tm_shape(sq_grid) +
tm_polygons("count", palette = "Greens",
style = "kmeans", title = "Properties for sale") +
tm_layout(frame = F, legend.position = c(1,0.5))
props2 = st_interpolate_aw(oa[, "prop.count"], sq_grid, extensive = T)
tm_shape(props2) +
tm_polygons("prop.count", palette = "Greens",
style = "kmeans", title = "No. of Properties for sale") +
tm_layout(frame = F, legend.position = c(1,0.5))
gc()
# load the packages
library(sf)
library(Rcpp)
remove.packages("Rcpp")
install.packages("Rcpp")
setwd("~/Desktop/jan nie ba≈Çagani/all things uni/Dissertation/uli-nz")
# load the packages
library(sf)
library(sp)
library(tmap)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(rgeos)
library(geosphere)
#### Data imports ####
# geographic data
sa1 <- st_read("data/geographic/wellington_urban_sa1s.gpkg")
#sa1_cent <- st_read("data/geographic/wellington_urban_polygons_sa1s.gpkg")
stations <- st_read("data/transport/public_transport/Wellington_Public_Transport.geojson")
# census variables
households <- read.csv("data/geographic/SA1 CensusWellingtonRegion/households_in_sa1s.csv")
dampness <- read.csv("data/geographic/SA1 CensusWellingtonRegion/dampness.csv")
population <- read.csv("data/geographic/SA1 CensusWellingtonRegion/population_welly.csv")
#transforming to the same coordinate system
stations <- st_transform(stations, 27291)
sa1 = st_transform(sa1, 27291)
#### Adding Census vars ####
sa1_nons <- sa1 %>% st_drop_geometry()
head(sa1_nons)
dampness <- dampness %>%
mutate(code = as.character(code)) %>%
mutate(dampness_rate = as.numeric(as.factor(Total_damp))/as.numeric(as.factor(Total.stated)))
households <- households %>%
mutate(code = as.character(code)) %>%
mutate(no_households = as.numeric(no_households))
population <- population %>%
mutate(code = as.character(code)) %>%
mutate(population_usual = as.numeric(as.factor(population_usual))) %>%
mutate(maori_descent = as.numeric(as.factor(maori_descent))) %>%
mutate(median_income = as.numeric(as.factor(median_income))) %>%
mutate(maori_pr = maori_descent/population_usual)
sa1_h <- left_join(sa1, households, by = c("SA12018_V1"="code"))
sa1_h_d <- left_join(sa1_h, dampness, by = c("SA12018_V1"="code"))
sa1_all <- left_join(sa1_h_d, population, by = c("SA12018_V1"="code"))
head(sa1_all)
View(dampness)
dampness <- read.csv("data/geographic/SA1 CensusWellingtonRegion/dampness.csv")
dampness <- dampness %>%
mutate(code = as.character(code))
#### Data imports ####
# geographic data
sa1 <- st_read("data/geographic/wellington_urban_sa1s.gpkg")
#sa1_cent <- st_read("data/geographic/wellington_urban_polygons_sa1s.gpkg")
stations <- st_read("data/transport/public_transport/Wellington_Public_Transport.geojson")
# census variables
households <- read.csv("data/geographic/SA1 CensusWellingtonRegion/households_in_sa1s.csv")
dampness <- read.csv("data/geographic/SA1 CensusWellingtonRegion/dampness.csv")
population <- read.csv("data/geographic/SA1 CensusWellingtonRegion/population_welly.csv")
#transforming to the same coordinate system
stations <- st_transform(stations, 27291)
sa1 = st_transform(sa1, 27291)
tmap_mode("view")
#### Adding Census vars ####
sa1_nons <- sa1 %>% st_drop_geometry()
head(sa1_nons)
dampness <- dampness %>%
mutate(code = as.character(code))
households <- households %>%
mutate(code = as.character(code)) %>%
mutate(no_households = as.numeric(no_households))
population <- population %>%
mutate(code = as.character(code)) %>%
mutate(population_usual = as.numeric(as.factor(population_usual))) %>%
mutate(maori_descent = as.numeric(as.factor(maori_descent))) %>%
mutate(median_income = as.numeric(as.factor(median_income))) %>%
mutate(maori_pr = maori_descent/population_usual)
sa1_h <- left_join(sa1, households, by = c("SA12018_V1"="code"))
sa1_h_d <- left_join(sa1_h, dampness, by = c("SA12018_V1"="code"))
sa1_all <- left_join(sa1_h_d, population, by = c("SA12018_V1"="code"))
head(sa1_all)
sa1_all = subset(sa1_all, select = -c(X,Total_damp,Not_damp, Total.stated, maori_descent))
head(sa1_all)
#### Spatial Interpolation ####
grid <- st_sample(sa1_all, 5000, type = "regular")
grid <- st_transform(grid, 27291)
grid <- st_as_sf(grid)
# IDW for census variables
idw_income <- idw(formula = median_income~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=1000)
library(gstat)
f
# IDW for census variables
idw_income <- idw(formula = median_income~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=1000)
idw_hs <- idw(formula = no_households~1, locations = sa1_all,
newdata = grid, idp = 1)
idw_damp <- idw(formula = dampness~1, locations = sa1_all,
newdata = grid, idp = 2)
idw_maori <- idw(formula = maori_pr~1, locations = sa1_all,
newdata = grid, idp = 2)
idw_damp <- idw(formula = dampness~1, locations = sa1_all,
newdata = grid, idp = 2)
tm_shape(idw_income) +
tm_dots(col="var1.pred", style="kmeans") +
tm_basemap("OpenStreetMap")
# IDW for census variables
idw_income <- idw(formula = median_income~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=100)
tm_shape(idw_income) +
tm_dots(col="var1.pred", style="kmeans") +
tm_basemap("OpenStreetMap")
# IDW for census variables
idw_income <- idw(formula = median_income~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=50)
tm_shape(idw_income) +
tm_dots(col="var1.pred", style="kmeans") +
tm_basemap("OpenStreetMap")
# IDW for census variables
idw_income <- idw(formula = median_income~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=10)
tm_shape(idw_income) +
tm_dots(col="var1.pred", style="kmeans") +
tm_basemap("OpenStreetMap")
# IDW for census variables
idw_income <- idw(formula = median_income~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=10)
idw_hs <- idw(formula = no_households~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=10)
idw_damp <- idw(formula = dampness~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=10)
idw_maori <- idw(formula = maori_pr~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=10)
tm_shape(sa1_all) +
tm_fill(col="dampness",
style = "kmeans", palette = "Reds") +
tm_borders("transparent")
dampness <- dampness %>%
mutate(code = as.numeric(as.character(code)))
#### Data imports ####
# geographic data
sa1 <- st_read("data/geographic/wellington_urban_sa1s.gpkg")
#sa1_cent <- st_read("data/geographic/wellington_urban_polygons_sa1s.gpkg")
stations <- st_read("data/transport/public_transport/Wellington_Public_Transport.geojson")
# census variables
households <- read.csv("data/geographic/SA1 CensusWellingtonRegion/households_in_sa1s.csv")
dampness <- read.csv("data/geographic/SA1 CensusWellingtonRegion/dampness.csv")
population <- read.csv("data/geographic/SA1 CensusWellingtonRegion/population_welly.csv")
#transforming to the same coordinate system
stations <- st_transform(stations, 27291)
sa1 = st_transform(sa1, 27291)
tmap_mode("view")
tm_shape(sa1) +
tm_borders(col="black") +
tm_shape(stations) +
tm_dots(col="red")
#### Adding Census vars ####
sa1_nons <- sa1 %>% st_drop_geometry()
head(sa1_nons)
dampness <- dampness %>%
mutate(code = as.numeric(as.character(code)))
households <- households %>%
mutate(code = as.character(code)) %>%
mutate(no_households = as.numeric(no_households))
population <- population %>%
mutate(code = as.character(code)) %>%
mutate(population_usual = as.numeric(as.factor(population_usual))) %>%
mutate(maori_descent = as.numeric(as.factor(maori_descent))) %>%
mutate(median_income = as.numeric(as.factor(median_income))) %>%
mutate(maori_pr = maori_descent/population_usual)
sa1_h <- left_join(sa1, households, by = c("SA12018_V1"="code"))
sa1_h_d <- left_join(sa1_h, dampness, by = c("SA12018_V1"="code"))
sa1_all <- left_join(sa1_h_d, population, by = c("SA12018_V1"="code"))
dampness <- dampness %>%
mutate(code = as.numeric(as.character(code))) %>%
mutate(dampness = as.numeric(dampness))
#### Data imports ####
# geographic data
sa1 <- st_read("data/geographic/wellington_urban_sa1s.gpkg")
#sa1_cent <- st_read("data/geographic/wellington_urban_polygons_sa1s.gpkg")
stations <- st_read("data/transport/public_transport/Wellington_Public_Transport.geojson")
# census variables
households <- read.csv("data/geographic/SA1 CensusWellingtonRegion/households_in_sa1s.csv")
dampness <- read.csv("data/geographic/SA1 CensusWellingtonRegion/dampness.csv")
population <- read.csv("data/geographic/SA1 CensusWellingtonRegion/population_welly.csv")
#transforming to the same coordinate system
stations <- st_transform(stations, 27291)
sa1 = st_transform(sa1, 27291)
tmap_mode("view")
tm_shape(sa1) +
tm_borders(col="black") +
tm_shape(stations) +
tm_dots(col="red")
#### Adding Census vars ####
sa1_nons <- sa1 %>% st_drop_geometry()
head(sa1_nons)
dampness <- dampness %>%
mutate(code = as.numeric(as.character(code))) %>%
mutate(dampness = as.numeric(dampness))
households <- households %>%
mutate(code = as.character(code)) %>%
mutate(no_households = as.numeric(no_households))
#### Data imports ####
# geographic data
sa1 <- st_read("data/geographic/wellington_urban_sa1s.gpkg")
#sa1_cent <- st_read("data/geographic/wellington_urban_polygons_sa1s.gpkg")
stations <- st_read("data/transport/public_transport/Wellington_Public_Transport.geojson")
# census variables
households <- read.csv("data/geographic/SA1 CensusWellingtonRegion/households_in_sa1s.csv")
dampness <- read.csv("data/geographic/SA1 CensusWellingtonRegion/dampness.csv")
population <- read.csv("data/geographic/SA1 CensusWellingtonRegion/population_welly.csv")
#transforming to the same coordinate system
stations <- st_transform(stations, 27291)
sa1 = st_transform(sa1, 27291)
tmap_mode("view")
tm_shape(sa1) +
tm_borders(col="black") +
tm_shape(stations) +
tm_dots(col="red")
#### Adding Census vars ####
sa1_nons <- sa1 %>% st_drop_geometry()
head(sa1_nons)
dampness <- dampness %>%
mutate(code = as.character(code)) %>%
mutate(dampness = as.character(as.numeric(dampness)))
#### Data imports ####
# geographic data
sa1 <- st_read("data/geographic/wellington_urban_sa1s.gpkg")
#sa1_cent <- st_read("data/geographic/wellington_urban_polygons_sa1s.gpkg")
stations <- st_read("data/transport/public_transport/Wellington_Public_Transport.geojson")
# census variables
households <- read.csv("data/geographic/SA1 CensusWellingtonRegion/households_in_sa1s.csv")
dampness <- read.csv("data/geographic/SA1 CensusWellingtonRegion/dampness.csv")
population <- read.csv("data/geographic/SA1 CensusWellingtonRegion/population_welly.csv")
#transforming to the same coordinate system
stations <- st_transform(stations, 27291)
sa1 = st_transform(sa1, 27291)
tmap_mode("view")
tm_shape(sa1) +
tm_borders(col="black") +
tm_shape(stations) +
tm_dots(col="red")
#### Adding Census vars ####
sa1_nons <- sa1 %>% st_drop_geometry()
head(sa1_nons)
dampness[is.na(dampness)] <- 0
dampness <- dampness %>%
mutate(code = as.character(code)) %>%
mutate(dampness = as.character(as.numeric(dampness)))
# census variables
households <- read.csv("data/geographic/SA1 CensusWellingtonRegion/households_in_sa1s.csv")
dampness <- read.csv("data/geographic/SA1 CensusWellingtonRegion/dampness.csv")
population <- read.csv("data/geographic/SA1 CensusWellingtonRegion/population_welly.csv")
#transforming to the same coordinate system
stations <- st_transform(stations, 27291)
sa1 = st_transform(sa1, 27291)
tmap_mode("view")
tm_shape(sa1) +
tm_borders(col="black") +
tm_shape(stations) +
tm_dots(col="red")
#### Adding Census vars ####
sa1_nons <- sa1 %>% st_drop_geometry()
head(sa1_nons)
dampness[is.na(dampness)] <- 0
dampness <- dampness %>%
mutate(code = as.character(code)) %>%
mutate(dampness = as.numeric(as.character(dampness)))
head(dampness)
summary(dampness)
households <- households %>%
mutate(code = as.character(code)) %>%
mutate(no_households = as.numeric(no_households))
population <- population %>%
mutate(code = as.character(code)) %>%
mutate(population_usual = as.numeric(as.factor(population_usual))) %>%
mutate(maori_descent = as.numeric(as.factor(maori_descent))) %>%
mutate(median_income = as.numeric(as.factor(median_income))) %>%
mutate(maori_pr = maori_descent/population_usual)
sa1_h <- left_join(sa1, households, by = c("SA12018_V1"="code"))
sa1_h_d <- left_join(sa1_h, dampness, by = c("SA12018_V1"="code"))
sa1_all <- left_join(sa1_h_d, population, by = c("SA12018_V1"="code"))
head(sa1_all)
sa1_all = subset(sa1_all, select = -c(X,Total_damp,Not_damp, Total.stated, maori_descent))
head(sa1_all)
tm_shape(sa1_all) +
tm_fill(col="dampness",
style = "kmeans", palette = "Reds") +
tm_borders("transparent")
#### Spatial Interpolation ####
grid <- st_sample(sa1_all, 5000, type = "regular")
grid <- st_transform(grid, 27291)
grid <- st_as_sf(grid)
tmap_mode("view")
tm_shape(grid) +
tm_dots(col="grey") +
tm_shape(stations) +
tm_dots("black")
# IDW for census variables
idw_income <- idw(formula = median_income~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=10)
idw_hs <- idw(formula = no_households~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=10)
idw_damp <- idw(formula = dampness~1, locations = sa1_all,
newdata = grid, idp = 1, nmax=10)
head(sa1_all)
?knn2nb
##### Impute missing values #####
knn5 <- knn2nb(knearneigh(sa1_all, k = 5), row.names = SA12018_V1)
library(spdep)
install.packages("spdep")
?knn2nb
library(spdep)
?knn2nb
##### Impute missing values #####
knn5 <- knn2nb(knearneigh(sa1_all, k = 5), row.names = SA12018_V1)
sa1 = st_transform(sa1, 27291)
?knearneigh
##### Impute missing values #####
sa1_sp <- as(sa1_all, Class = "Spatial")
knn5 <- knn2nb(knearneigh(sa1_sp, k = 5), row.names = SA12018_V1)
##### Impute missing values #####
sa1_sp <- as(sa1_all, Class = "Spatial") %>%
mutate(dampness = as.numeric(dampness))
##### Impute missing values #####
sa1_sp <- as(sa1_all, Class = "Spatial") %>%
mutate(dampness = as.numeric(as.character(dampness)))
sa1_sp <- mutate(sa1_sp, dampness = as.numeric(as.character(dampness)))
households <- households %>%
mutate(code = as.character(code)) %>%
mutate(no_households = as.numeric(no_households))
library(dplyr)
households <- households %>%
mutate(code = as.character(code)) %>%
mutate(no_households = as.numeric(no_households))
sa1_sp <- mutate(sa1_sp, dampness = as.numeric(as.character(dampness)))
##### Impute missing values #####
sa1_all <- mutate(sa1_all, dampness = as.numeric(as.character(dampness)))
sa1_sp <- as(sa1_all, Class = "Spatial")
knn5 <- knn2nb(knearneigh(sa1_sp, k = 5), row.names = SA12018_V1)
knearneigh(sa1_sp, k = 5)
sa1_sp <- as(sa1, Class = "Spatial")
knearneigh(sa1_sp, k = 5)
#### Data imports ####
# geographic data
sa1 <- st_read("data/geographic/wellington_urban_sa1s.gpkg")
sa1 <- st_transform(sa1, 27291)
sa1 <- as(sa1, Class = "Spatial")
knearneigh(sa1, k = 5)
sa1
?as
sa1 <- SpatialPoints(sa1)
knearneigh(sa1, k = 5)
knn5 <- knn2nb(knearneigh(sa1_all, k = 5), row.names = SA12018_V1)
sa1_all <- SpatialPoints(sa1_all)
sa1 <- SpatialPoints(sa1)
knn5 <- knn2nb(knearneigh(sa1, k = 5), row.names = SA12018_V1)
knn5 <- knn2nb(knearneigh(sa1, k = 5), row.names = 'SA12018_V1')
knn5 <- knn2nb(knearneigh(sa1, k = 5))
knn5
plot(knn5)
which(is.na(sa1_all$dampness)) <- mean(knn5)
which(is.na(sa1_all$dampness))
which(is.na(sa1_all))
which(is.na(sa1_all$dampness))
missing_dampness_ind <- which(is.na(sa1_all$dampness))
sa1_all[missing_dampness_ind]
sa1_all[missing_dampness_ind,]
sa1s_na_damp <- sa1_all[which(is.na(sa1_all$dampness)),]
sa1s_na_damp
sapply(1:length(knn5), function(N){mean(dampness[N])})
